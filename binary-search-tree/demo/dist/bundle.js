!function(g){var I={};function e(C){if(I[C])return I[C].exports;var A=I[C]={i:C,l:!1,exports:{}};return g[C].call(A.exports,A,A.exports,e),A.l=!0,A.exports}e.m=g,e.c=I,e.d=function(g,I,C){e.o(g,I)||Object.defineProperty(g,I,{configurable:!1,enumerable:!0,get:C})},e.r=function(g){Object.defineProperty(g,"__esModule",{value:!0})},e.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return e.d(I,"a",I),I},e.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},e.p="",e(e.s=1)}([function(module,exports,__webpack_require__){"use strict";eval("\n/**\n    This module contains a class to represent a Binary Search Tree.\n  It supports both repeated and non repeated elements: you can set this\n  constraint when creating a new tree object.\n    An important thing to know is that the types you want to use in the tree\n  must implement the [[NodeData]] interface. Otherwise, the tree won't\n  work accordingly.\n  @preferred\n*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n  A node used in the tree.\n  @hidden\n*/\nclass TreeNode {\n    constructor(data) {\n        this.data = data;\n        this.amount = 1;\n        this.left = undefined;\n        this.right = undefined;\n    }\n    /** Checks whether an equals function exists in the object. If it doesnt,\n    tries to use === operator to perform equality check instead. */\n    equals(obj) {\n        if (this.data.equals)\n            return this.data.equals(obj.data);\n        else\n            return this.data === obj.data;\n    }\n    /** Checks whether an greaterThan function exists in the object. If it doesnt,\n    tries to use > operator to check if this.data is greater than obj.data */\n    greaterThan(obj) {\n        if (this.data.greaterThan)\n            return this.data.greaterThan(obj.data);\n        else\n            return this.data > obj.data;\n    }\n}\n/** The Binary Search Tree class. It is a generic class, so it is supposed to\nsupport user defined types. However, in order to the class work properly, it\nis necessary that the given type implements the [[NodeData]] interface. */\nclass BinarySearchTree {\n    /**\n      @param {boolean} repeated true if you want the tree to allow repeated elements. By default it is false.\n    */\n    constructor(repeated = false) {\n        this.root = undefined;\n        this.size = 0;\n        this.repeated = repeated;\n    }\n    /**\n      @returns The amount of elements stored in the tree.\n    */\n    getSize() {\n        return this.size;\n    }\n    /**\n      Clear the tree. It will loose reference to every node that had been stored.\n    */\n    clear() {\n        this.root = undefined;\n        this.size = 0;\n    }\n    /**\n      @param {T} value The value that you want to count in the tree.\n      @returns The number of elements that match that value.\n    */\n    count(value) {\n        let element = this.findRef(value)[0];\n        if (element)\n            return element.amount;\n        else\n            return 0;\n    }\n    /**\n      A generator that yields the elements of the tree in order.\n    */\n    valuesGen() {\n        function* helper(curNode) {\n            if (curNode) {\n                yield* helper(curNode.left);\n                for (let i = 0; i < curNode.amount; ++i)\n                    yield curNode.data;\n                yield* helper(curNode.right);\n            }\n        }\n        return helper(this.root);\n    }\n    /**\n      @returns an array of elements stored in the tree in increasing order. It's\n      done by implementing Morris Inorder Tree Traversal Algorithm.\n    */\n    valuesList() {\n        let values = [];\n        let curNode = this.root;\n        while (curNode) {\n            if (!curNode.left) {\n                for (let i = 0; i < curNode.amount; ++i)\n                    values.push(curNode.data);\n                curNode = curNode.right;\n            }\n            else {\n                let pre = curNode.left;\n                while (pre.right && pre.right !== curNode)\n                    pre = pre.right;\n                if (pre.right == curNode) {\n                    for (let i = 0; i < curNode.amount; ++i)\n                        values.push(curNode.data);\n                    pre.right = undefined;\n                    curNode = curNode.right;\n                }\n                else {\n                    pre.right = curNode;\n                    curNode = curNode.left;\n                }\n            }\n        }\n        return values;\n    }\n    /**\n      @param {T} value The value to be stored in the tree.\n      @returns true if the element was successfully stored, false otherwise.\n    */\n    insert(value) {\n        let newNode = new TreeNode(value);\n        if (!this.root) {\n            this.root = newNode;\n        }\n        else {\n            let currentNode = this.root;\n            while (true) {\n                if (newNode.greaterThan(currentNode)) {\n                    if (currentNode.right)\n                        currentNode = currentNode.right;\n                    else {\n                        currentNode.right = newNode;\n                        break;\n                    }\n                }\n                else if (newNode.equals(currentNode) && this.repeated) {\n                    ++currentNode.amount;\n                    break;\n                }\n                else if (newNode.equals(currentNode) && !this.repeated) {\n                    return false;\n                }\n                else {\n                    if (currentNode.left)\n                        currentNode = currentNode.left;\n                    else {\n                        currentNode.left = newNode;\n                        break;\n                    }\n                }\n            }\n        }\n        ++this.size;\n        return true;\n    }\n    findRef(value) {\n        let seekedValue = new TreeNode(value);\n        let curNode = this.root;\n        let curParent;\n        curParent = undefined;\n        while (curNode) {\n            if (seekedValue.equals(curNode))\n                return [curNode, curParent];\n            else {\n                curParent = curNode;\n                if (seekedValue.greaterThan(curNode))\n                    curNode = curNode.right;\n                else\n                    curNode = curNode.left;\n            }\n        }\n        return [undefined, undefined];\n    }\n    /**\n      @param {T} value The value to be searched.\n      @returns true if the falue was found, false otherwise.\n    */\n    find(value) {\n        let found = this.findRef(value)[0];\n        return found ? true : false;\n    }\n    /**\n      @param {T} value The value to be removed.\n      @returns true if the value was found and removed, false otherwise.\n    */\n    remove(value) {\n        let curNode;\n        let parent;\n        [curNode, parent] = this.findRef(value);\n        if (!curNode && !parent)\n            return false;\n        if (curNode) {\n            if (curNode.amount > 1)\n                --curNode.amount;\n            else if (!curNode.right && !curNode.left) {\n                if (parent) {\n                    if (curNode.greaterThan)\n                        curNode.greaterThan(parent) ? parent.right = undefined : parent.left = undefined;\n                }\n                else\n                    this.root = undefined;\n            }\n            else if (!curNode.left || !curNode.right) {\n                let child = curNode.left || curNode.right;\n                if (parent) {\n                    if (curNode.greaterThan)\n                        curNode.greaterThan(parent) ? parent.right = child : parent.left = child;\n                }\n                else\n                    this.root = child;\n            }\n            else {\n                let candidateParent = curNode;\n                let candidate = curNode.left;\n                while (candidate.right) {\n                    candidateParent = candidate;\n                    candidate = candidate.right;\n                }\n                if (candidate.left)\n                    candidateParent.left = candidate.left;\n                if (curNode.left.equals) {\n                    if (!curNode.left.equals(candidate))\n                        candidate.left = curNode.left;\n                }\n                candidate.right = curNode.right;\n                if (parent)\n                    curNode.greaterThan(parent) ? parent.right = candidate : parent.left = candidate;\n                else\n                    this.root = candidate;\n            }\n            --this.size;\n            return true;\n        }\n        return false;\n    }\n}\nexports.BinarySearchTree = BinarySearchTree;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BinarySearchTree_1 = __webpack_require__(0);\nlet tree = new BinarySearchTree_1.BinarySearchTree();\nlet treeRepr = document.getElementById('treeRepr');\nlet sizeElement = document.getElementById('treeSize');\nfunction refreshScreen() {\n    // Refresh the node counter\n    sizeElement.innerHTML = tree.getSize().toString();\n    // Refresh the tree representation\n    let valuesText = [];\n    for (let value of tree.valuesGen())\n        valuesText.push(value.toString());\n    treeRepr.innerHTML = valuesText.join(' ');\n}\nlet insertButton = document.getElementById('insertButton');\nlet input = document.getElementById('newValueField');\ninsertButton.onclick = function () {\n    tree.insert(parseInt(input.value));\n    refreshScreen();\n};\nlet removeButton = document.getElementById('removeButton');\nremoveButton.onclick = function () {\n    tree.remove(parseInt(input.value));\n    refreshScreen();\n};\nlet clearButton = document.getElementById('clearButton');\nclearButton.onclick = function () {\n    tree.clear();\n    refreshScreen();\n};\nlet searchButton = document.getElementById('searchButton');\nlet otherField = document.getElementById('otherField');\nsearchButton.onclick = function () {\n    let result = tree.find(parseInt(otherField.value));\n    let resultsSpan = document.getElementById('otherResults');\n    let text;\n    text = (result) ? 'Value found' : 'Value not found';\n    resultsSpan.innerHTML = text;\n};\nlet countButton = document.getElementById('countButton');\ncountButton.onclick = function () {\n    let result = tree.count(parseInt(otherField.value));\n    let resultsSpan = document.getElementById('otherResults');\n    resultsSpan.innerHTML = `${result} elements found`;\n};\nrefreshScreen();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9iaW5hcnktc2VhcmNoLXRyZWUvZGVtby9zcmMvaW5kZXgudHM/YjA0MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixPQUFPO0FBQ3RDO0FBQ0EiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgQmluYXJ5U2VhcmNoVHJlZV8xID0gcmVxdWlyZShcIi4uLy4uL0JpbmFyeVNlYXJjaFRyZWVcIik7XG5sZXQgdHJlZSA9IG5ldyBCaW5hcnlTZWFyY2hUcmVlXzEuQmluYXJ5U2VhcmNoVHJlZSgpO1xubGV0IHRyZWVSZXByID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RyZWVSZXByJyk7XG5sZXQgc2l6ZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHJlZVNpemUnKTtcbmZ1bmN0aW9uIHJlZnJlc2hTY3JlZW4oKSB7XG4gICAgLy8gUmVmcmVzaCB0aGUgbm9kZSBjb3VudGVyXG4gICAgc2l6ZUVsZW1lbnQuaW5uZXJIVE1MID0gdHJlZS5nZXRTaXplKCkudG9TdHJpbmcoKTtcbiAgICAvLyBSZWZyZXNoIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9uXG4gICAgbGV0IHZhbHVlc1RleHQgPSBbXTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiB0cmVlLnZhbHVlc0dlbigpKVxuICAgICAgICB2YWx1ZXNUZXh0LnB1c2godmFsdWUudG9TdHJpbmcoKSk7XG4gICAgdHJlZVJlcHIuaW5uZXJIVE1MID0gdmFsdWVzVGV4dC5qb2luKCcgJyk7XG59XG5sZXQgaW5zZXJ0QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luc2VydEJ1dHRvbicpO1xubGV0IGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ld1ZhbHVlRmllbGQnKTtcbmluc2VydEJ1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgIHRyZWUuaW5zZXJ0KHBhcnNlSW50KGlucHV0LnZhbHVlKSk7XG4gICAgcmVmcmVzaFNjcmVlbigpO1xufTtcbmxldCByZW1vdmVCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVtb3ZlQnV0dG9uJyk7XG5yZW1vdmVCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICB0cmVlLnJlbW92ZShwYXJzZUludChpbnB1dC52YWx1ZSkpO1xuICAgIHJlZnJlc2hTY3JlZW4oKTtcbn07XG5sZXQgY2xlYXJCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xlYXJCdXR0b24nKTtcbmNsZWFyQnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdHJlZS5jbGVhcigpO1xuICAgIHJlZnJlc2hTY3JlZW4oKTtcbn07XG5sZXQgc2VhcmNoQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlYXJjaEJ1dHRvbicpO1xubGV0IG90aGVyRmllbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3RoZXJGaWVsZCcpO1xuc2VhcmNoQnV0dG9uLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHJlc3VsdCA9IHRyZWUuZmluZChwYXJzZUludChvdGhlckZpZWxkLnZhbHVlKSk7XG4gICAgbGV0IHJlc3VsdHNTcGFuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ290aGVyUmVzdWx0cycpO1xuICAgIGxldCB0ZXh0O1xuICAgIHRleHQgPSAocmVzdWx0KSA/ICdWYWx1ZSBmb3VuZCcgOiAnVmFsdWUgbm90IGZvdW5kJztcbiAgICByZXN1bHRzU3Bhbi5pbm5lckhUTUwgPSB0ZXh0O1xufTtcbmxldCBjb3VudEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3VudEJ1dHRvbicpO1xuY291bnRCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgcmVzdWx0ID0gdHJlZS5jb3VudChwYXJzZUludChvdGhlckZpZWxkLnZhbHVlKSk7XG4gICAgbGV0IHJlc3VsdHNTcGFuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ290aGVyUmVzdWx0cycpO1xuICAgIHJlc3VsdHNTcGFuLmlubmVySFRNTCA9IGAke3Jlc3VsdH0gZWxlbWVudHMgZm91bmRgO1xufTtcbnJlZnJlc2hTY3JlZW4oKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n")}]);